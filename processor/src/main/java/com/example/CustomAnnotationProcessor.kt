package com.example

import com.example.annotation.ProvideService
import com.squareup.javapoet.JavaFile
import javax.annotation.processing.AbstractProcessor
import javax.annotation.processing.RoundEnvironment
import javax.annotation.processing.SupportedAnnotationTypes
import javax.annotation.processing.SupportedSourceVersion
import javax.lang.model.SourceVersion
import javax.lang.model.element.ElementKind
import javax.lang.model.element.TypeElement

@SupportedAnnotationTypes("com.example.annotation.ProvideService")
@SupportedSourceVersion(SourceVersion.RELEASE_7)
open class CustomAnnotationProcessor : AbstractProcessor() {
    override fun process(set: Set<TypeElement>, roundEnv: RoundEnvironment): Boolean {
        roundEnv.getElementsAnnotatedWith(ProvideService::class.java).forEach { element ->
            if (element.kind == ElementKind.CLASS) {
                val typeSpec = ProvideServiceCodeGenerator().generate(element)
                val file = JavaFile.builder("com.packageName", typeSpec)
                        .addFileComment("Generated file do not edit, generated by ")
                        .indent("    ")
                        .build()
                file.writeTo(processingEnv.filer)
            } else {

            }
        }
        return true
    }
}
